(function($){


	/**
	*  initialize_field
	*
	*  This function will initialize the $field.
	*
	*  @date	30/11/17
	*  @since	5.6.5
	*
	*  @param	n/a
	*  @return	n/a
	*/

	function initialize_field( $field ) {

		/**
		*
		*  Return input components from the field.
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*/

		function returnGradientSelect() {
			return $field.find('div.acf-css-gradient-picker__gradient-select').find('select');
		}

		function returnAngleNumberInput() {
			return $field.find('div.acf-css-gradient-picker__angle').find('input[type="number"]');
		}

		function returnColourControls() {
			return $field.find('div[acf-css-gradient-picker__colour-picker-id]');
		}

		function returnColourControlInputs() {
			return $field.find('div[acf-css-gradient-picker__colour-picker-id]').find('input[type="text"]');
		}

		function returnStopNumberInputs() {
			return $field.find('div[acf-css-gradient-picker__stop-id]').find('input[type="number"]');
		}

		function returnGradientPreview() {
			return $field.find('div.acf-css-gradient-picker-preview');
		}



		/**
		*  returnValues
		*
		*  Return the values from the respective inputs
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*  @return array values
		*/

		function returnValues() {
			// Get all the respective inputs
			var $gradientSelect	= returnGradientSelect();
			var $angleInput			= returnAngleNumberInput();
			var $colourInputs		= returnColourControlInputs();
			var $stopInputs			= returnStopNumberInputs();

			// Get an array of their values
			var values = {};
			values['format']	=	$($gradientSelect).val();
			values['angle']		=	$($angleInput).val();

			values['colours'] = {};
			values['colours']['colour1'] = $($colourInputs[0]).val();
			values['colours']['colour2'] = $($colourInputs[1]).val();

			values['stops'] = {};
			values['stops']['stop1'] = $($stopInputs[0]).val();
			values['stops']['stop2'] = $($stopInputs[1]).val();

			return values;
		}



		/**
		*  buildGradient
		*
		*  Build the gradient css.
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*  @param array values from the various inputs
		*  @return gradient string
		*/

		function buildGradient(values) {
			var gradient = '';
			// Check if all components are available
			if (
				values['format'] !== null &&
				values['angle'] !== null &&
				values['colours']['colour1'] !== null &&
				values['colours']['colour2'] !== null &&
				values['stops']['stop1'] !== null &&
				values['stops']['stop2'] !== null
			) {
				// Check the format
				if (values['format'] === 'radial') {
					gradient += 'radial-gradient(circle, ';
				} else {
					gradient += 'linear-gradient(' + values['angle'] + 'deg, ';
				}

				// Add colours
				gradient += values['colours']['colour1'] + ' ' + values['stops']['stop1']  + '%, ';
				gradient += values['colours']['colour2'] + ' ' + values['stops']['stop2']  + '%)';

				return gradient;
			} else {
				return 'Error!';
			}
		}



		/**
		*  updateGradientPreview
		*
		*  Update the graident preview css
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*  @param string gradient generated by buildGradient
		*
		*/

		function updateGradientPreview(gradient) {
			// Get the div
			var $gradientPreview = returnGradientPreview();
			// Apply the gradient
			$($gradientPreview).css( 'background', gradient );
		}



		/**
		*  handleOnChange
		*
		*  Handle the change to the inputs by loading the
		*  new acf values and generating the new preview.
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*/

		function handleOnChange() {
			// Get each of the components
			var $gradientSelect	= returnGradientSelect();
			var $angleInput			= returnAngleNumberInput();
			var $colourInputs		= returnColourControlInputs();
			var $stopInputs			= returnStopNumberInputs();

			// Get the values
			var values = returnValues();

			// Update the preview
			var gradient = buildGradient(values);
			updateGradientPreview(gradient);

			console.log(values)
			var $globalInput = $('div.global_input input[type="text"]');
			$($globalInput).val(values);
			acf.val($($globalInput), values);

		}



		/**
		*  buildColorPicker
		*
		*  Loads the colour picker. As per ACF Colour Picker
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*  @param	jQuery|object $el	jQuery element.
		*  @return	None
		*/

		function buildColorPicker($el) {
			// Search the element for the inputs
			var $input			= $el.find('input[type="hidden"]');
			var $inputText	= $el.find('input[type="text"]');
			// Build the function to handle the colour change
			var onChange = function() {
				// // timeout is required to ensure the $input val is correct
				setTimeout(function(){
					handleOnChange();
				}, 1);
			}
			// args
			var args = {
				defaultColor: false,
				palettes: true,
				hide: true,
				change: onChange,
				clear: onChange
			};
			// Load the colour picker
			$inputText.wpColorPicker( args );
		}



		/**
		*  buildColorPickers
		*
		* Wrapper to load all of the colour pickers.
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*/

		function buildColorPickers() {
			var $els = returnColourControls();

			$els.each(function($index, $el) {
				buildColorPicker($($el));
			});
		}



		/**
		*  buildGradientPreview
		*
		*  Inital load of the gradient preview
		*
		*  @date	19/10/19
		*  @since	5.6.5
		*
		*/


		function buildGradientPreview() {
			var values		= returnValues();
			var gradient	=	buildGradient(values);
			updateGradientPreview(gradient);
		}



		// Load all the good stuff
		buildColorPickers();
		buildGradientPreview();

	}



	if( typeof acf.add_action !== 'undefined' ) {

		/*
		*  ready & append (ACF5)
		*
		*  These two events are called when a field element is ready for initizliation.
		*  - ready: on page load similar to $(document).ready()
		*  - append: on new DOM elements appended via repeater field or other AJAX calls
		*
		*  @param	n/a
		*  @return	n/a
		*/

		acf.add_action('ready_field/type=css_gradient_picker', initialize_field);
		acf.add_action('append_field/type=css_gradient_picker', initialize_field);


	} else {

		/*
		*  acf/setup_fields (ACF4)
		*
		*  These single event is called when a field element is ready for initizliation.
		*
		*  @param	event		an event object. This can be ignored
		*  @param	element		An element which contains the new HTML
		*  @return	n/a
		*/

		$(document).on('acf/setup_fields', function(e, postbox){

			// find all relevant fields
			$(postbox).find('.field[data-field_type="FIELD_NAME"]').each(function(){

				// initialize
				initialize_field( $(this) );

			});

		});

	}

})(jQuery);
